import { ChangeDetectorRef, EventEmitter, OnInit, ViewContainerRef } from '@angular/core';
import { FormBuilder } from '@angular/forms';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { IMultiSelectOption, IMultiSelectSettings, IMultiSelectTexts } from 'angular-2-dropdown-multiselect';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { ToastsManager } from 'ng2-toastr';
import { SearchFormUtils } from '../../../angular-commons/services/searchform-utils.service';
import { SearchFormLayout } from '../../../angular-commons/services/layout.service';
import { CommonDocSearchForm } from '@dps/mycms-commons/dist/search-commons/model/forms/cdoc-searchform';
import { CommonDocDataService } from '@dps/mycms-commons/dist/search-commons/services/cdoc-data.service';
import { CommonDocRecord } from '@dps/mycms-commons/dist/search-commons/model/records/cdoc-entity-record';
import { CommonDocSearchResult } from '@dps/mycms-commons/dist/search-commons/model/container/cdoc-searchresult';
import { CommonDocSearchFormUtils } from '../../services/cdoc-searchform-utils.service';
import { GenericSearchFormSearchFormConverter } from '@dps/mycms-commons/dist/search-commons/services/generic-searchform.converter';
import { CommonDocDataCacheService } from '../../services/cdoc-datacache.service';
export declare abstract class CommonDocSearchformComponent<R extends CommonDocRecord, F extends CommonDocSearchForm, S extends CommonDocSearchResult<R, F>, D extends CommonDocDataService<R, F, S>> implements OnInit {
    protected sanitizer: DomSanitizer;
    fb: FormBuilder;
    protected searchFormUtils: SearchFormUtils;
    protected cdocSearchFormUtils: CommonDocSearchFormUtils;
    protected searchFormConverter: GenericSearchFormSearchFormConverter<F>;
    protected cdocDataCacheService: CommonDocDataCacheService<R, F, S, D>;
    protected toastr: ToastsManager;
    protected cd: ChangeDetectorRef;
    protected _searchResult: BehaviorSubject<S>;
    protected defaultSeLectSettings: IMultiSelectSettings;
    optionsSelectWhat: IMultiSelectOption[];
    optionsSelectType: IMultiSelectOption[];
    optionsSelectPlaylists: IMultiSelectOption[];
    settingsSelectWhat: IMultiSelectSettings;
    settingsSelectType: IMultiSelectSettings;
    settingsSelectPlaylists: IMultiSelectSettings;
    textsSelectWhat: IMultiSelectTexts;
    textsSelectType: IMultiSelectTexts;
    textsSelectPlaylists: IMultiSelectTexts;
    humanReadableSearchForm: SafeHtml;
    humanReadableSpecialFilter: string;
    showDetailsAvailable: boolean;
    showMetaAvailable: boolean;
    width8: string;
    width4: string;
    width3: string;
    width2: string;
    searchFormLayout: SearchFormLayout;
    short?: boolean;
    showForm?: boolean;
    showWhat?: boolean;
    showFulltext?: boolean;
    showDetails?: boolean;
    showMeta?: boolean;
    showSpecialFilter?: boolean;
    searchResult: S;
    search: EventEmitter<F>;
    changedShowForm: EventEmitter<boolean>;
    searchFormGroup: any;
    constructor(sanitizer: DomSanitizer, fb: FormBuilder, searchFormUtils: SearchFormUtils, cdocSearchFormUtils: CommonDocSearchFormUtils, searchFormConverter: GenericSearchFormSearchFormConverter<F>, cdocDataCacheService: CommonDocDataCacheService<R, F, S, D>, toastr: ToastsManager, vcr: ViewContainerRef, cd: ChangeDetectorRef);
    ngOnInit(): void;
    onSubmitSearch(event?: any): boolean;
    onChangeSelect(event?: any): boolean;
    protected createDefaultSearchResult(): S;
    protected createDefaultFormGroup(): any;
    protected updateSearchForm(searchSearchResult: S): void;
    protected updateFormGroup(cdocSearchSearchResult: S): void;
    protected updateSelectComponents(cdocSearchSearchResult: S): void;
    protected updateHumanReadableFiltes(cdocSearchSearchResult: S): void;
    protected updateAvailabilityFlags(cdocSearchSearchResult: S): void;
    protected removeMoreIdFilters(): void;
    updateFormState(state?: boolean): void;
    protected beforeDoSearchPrepareValues(values: {}): void;
    protected doSearch(): boolean;
}
