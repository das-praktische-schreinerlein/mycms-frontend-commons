import { ChangeDetectorRef, EventEmitter } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { ToastrService } from 'ngx-toastr';
import { TrackStatistic } from '../../../angular-maps/services/track-statistic.service';
import { GeoGpxParser } from '../../../angular-maps/services/geogpx.parser';
import { GenericAppService } from '@dps/mycms-commons/dist/commons/services/generic-app.service';
import { UploadEvent } from 'ngx-file-drop';
import { LatLngTime } from '../../../angular-maps/services/geo.parser';
import { MapElement } from '../../../angular-maps/services/leaflet-geo.plugin';
import { AbstractInlineComponent } from '../../../angular-commons/components/inline.component';
import { GeoParserDeterminer } from '../../../angular-maps/services/geo-parser.determiner';
import { TrackColors } from '@dps/mycms-commons/dist/geo-commons/model/track-colors';
import { MapDocRecord } from '@dps/mycms-commons/dist/geo-commons/model/map-element.types';
export declare abstract class AbstractGpxEditAreaComponent extends AbstractInlineComponent {
    fb: FormBuilder;
    protected toastr: ToastrService;
    protected cd: ChangeDetectorRef;
    protected appService: GenericAppService;
    protected geoParserService: GeoParserDeterminer;
    protected gpxParser: GeoGpxParser;
    private document;
    protected maxGpxFileLength: number;
    static readonly _DEFAULT_LAT = 51.9746413082;
    static readonly _DEFAULT_LON = 13.8;
    private trackStatisticService;
    private lastGpx;
    private lastName;
    private geoMap;
    trackColors: TrackColors;
    editTrackRecords: MapDocRecord[];
    renderedMapElements: MapElement[];
    trackSegmentStatistics: TrackStatistic[];
    editGpxFormGroup: FormGroup;
    type: string;
    gpxSrc: string;
    mergeNewTracks?: boolean;
    defaultPosition?: LatLngTime;
    save: EventEmitter<string>;
    static createDefaultPosition(): LatLngTime;
    constructor(fb: FormBuilder, toastr: ToastrService, cd: ChangeDetectorRef, appService: GenericAppService, geoParserService: GeoParserDeterminer, gpxParser: GeoGpxParser, document: any, maxGpxFileLength: number);
    gpxDropped(event: UploadEvent): void;
    updateMap(): boolean;
    generateTrackSegments(track: string): void;
    deleteTrackSegment(delSegIdx: number): boolean;
    mergeTrackSegment(mergeSegIdx: number): boolean;
    jumpToTrackSegment(delSegIdx: number): boolean;
    fixMap(): boolean;
    setMapElementsRendered(mapElements: MapElement[]): void;
    updateGpsTrack(): boolean;
    onGeoMapCreated(map: L.Map): void;
    updateGpsTrackFromMap(): boolean;
    createNewGpx(): boolean;
    protected prepareSubmitValues(values: {}): void;
    protected updateFormComponents(): void;
    protected setSelectionRangeOnInput(input: HTMLInputElement | HTMLTextAreaElement, selectionStart: number, selectionEnd: number): void;
    protected updateData(): void;
    protected setCurrentGpx(value: any): void;
    protected getCurrentGpx(): string;
    protected abstract createSanitized(values: {}): MapDocRecord;
}
